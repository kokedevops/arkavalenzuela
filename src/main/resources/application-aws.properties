spring.application.name=arkajvalenzuela

# Configuración del servidor
server.port=8888

# Configuración de la base de datos H2 para desarrollo local
# Comentar estas líneas y descomentar MySQL para producción
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.h2.console.enabled=true

# Configuración MySQL para AWS RDS (comentado para desarrollo local)
#spring.datasource.url=jdbc:mysql://172.30.3.71:3306/arka-base
#spring.datasource.username=admin
#spring.datasource.password=Koke1988*
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración de JPA/Hibernate
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

# DocumentDB Configuration (MongoDB compatible) - Comentado para desarrollo local
# Descomentar para usar MongoDB en AWS
#spring.data.mongodb.uri=mongodb://jvalenzuelad:Koke1988*@docdb-2025-08-29-01-09-05.cluster-czeoiiuouxe3.us-east-2.docdb.amazonaws.com:27017/arka-notifications?tls=true&tlsAllowInvalidHostnames=true&replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=false
#spring.data.mongodb.auto-index-creation=true

# MongoDB local para desarrollo (usar MongoDB local o comentar para deshabilitarlo)
spring.data.mongodb.uri=mongodb://localhost:27017/arka-notifications-dev
spring.data.mongodb.auto-index-creation=true


# Email Configuration
spring.mail.host=${SMTP_HOST:smtp.gmail.com}
spring.mail.port=${SMTP_PORT:587}
spring.mail.username=${EMAIL_USERNAME:}
spring.mail.password=${EMAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.ssl.trust=${SMTP_HOST:smtp.gmail.com}

# ARKA Email Settings
arka.mail.from=${EMAIL_FROM:noreply@arka.com}
arka.mail.enabled=${EMAIL_ENABLED:false}

server.port=8888

# Configuración específica para múltiples stores
spring.data.mongodb.repositories.enabled=true
spring.data.jpa.repositories.enabled=true
spring.data.r2dbc.repositories.enabled=false

# Logging
logging.level.org.springframework.data.mongodb=DEBUG
logging.level.org.springframework.data.jpa=DEBUG
logging.level.com.arka=DEBUG


# AWS Configuration para Saga Pattern
aws.region=${AWS_REGION:us-east-1}
aws.s3.bucket-name=${AWS_S3_BUCKET:arka-templates}
aws.sns.saga-topic-arn=${AWS_SNS_SAGA_TOPIC:arn:aws:sns:us-east-1:123456789:arka-saga-topic}
aws.lambda.inventory-function-name=${AWS_LAMBDA_INVENTORY:arka-saga-inventory}
aws.lambda.shipping-function-name=${AWS_LAMBDA_SHIPPING:arka-saga-shipping}
aws.lambda.notification-function-name=${AWS_LAMBDA_NOTIFICATION:arka-saga-notification}

# Configuración para el modo mock (desarrollo local)
# Cambiar a false para usar AWS real
aws.mock.enabled=${AWS_MOCK_ENABLED:true}

# Configuración de Saga
saga.timeout.minutes=${SAGA_TIMEOUT_MINUTES:10}
saga.retry.max-attempts=${SAGA_RETRY_MAX_ATTEMPTS:3}
saga.retry.delay-seconds=${SAGA_RETRY_DELAY_SECONDS:2}

# External Services Configuration
external.services.inventory.url=${INVENTORY_SERVICE_URL:http://localhost:8081}
external.services.shipping.url=${SHIPPING_SERVICE_URL:http://localhost:8082}
external.s2.enabled=${EXTERNAL_S2_ENABLED:true}
external.chipmen.enabled=${EXTERNAL_CHIPMEN_ENABLED:true}