# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: arka-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "prometheus_rules.yml"
    
    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
      
      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics
      
      # Config Server
      - job_name: 'config-server'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - arka-ecommerce
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: config-server-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http
        metrics_path: /actuator/prometheus
      
      # Eureka Server
      - job_name: 'eureka-server'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - arka-ecommerce
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: eureka-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http
        metrics_path: /actuator/prometheus
      
      # API Gateway
      - job_name: 'api-gateway'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - arka-ecommerce
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: api-gateway-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http
        metrics_path: /actuator/prometheus
      
      # E-commerce Core
      - job_name: 'ecommerce-core'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - arka-ecommerce
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: ecommerce-core-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http
        metrics_path: /actuator/prometheus
      
      # Arca Cotizador
      - job_name: 'arca-cotizador'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - arka-ecommerce
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: arca-cotizador-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http
        metrics_path: /actuator/prometheus
      
      # Arca Gestor Solicitudes
      - job_name: 'arca-gestor-solicitudes'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - arka-ecommerce
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: arca-gestor-solicitudes-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http
        metrics_path: /actuator/prometheus
      
      # Hello World Service
      - job_name: 'hello-world-service'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - arka-ecommerce
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: hello-world-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http
        metrics_path: /actuator/prometheus
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
  
  prometheus_rules.yml: |
    groups:
    - name: arka-ecommerce-alerts
      rules:
      - alert: ServiceDown
        expr: up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Service {{ $labels.job }} is down"
          description: "Service {{ $labels.job }} has been down for more than 1 minute."
      
      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) * 100 > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage on {{ $labels.pod }}"
          description: "Memory usage is above 80% for pod {{ $labels.pod }}"
      
      - alert: HighCPUUsage
        expr: (rate(container_cpu_usage_seconds_total[5m]) / container_spec_cpu_quota * container_spec_cpu_period) * 100 > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage on {{ $labels.pod }}"
          description: "CPU usage is above 80% for pod {{ $labels.pod }}"
      
      - alert: DatabaseConnectionFailure
        expr: mysql_up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "MySQL database is down"
          description: "MySQL database connection failed"
---
# Prometheus RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: arka-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: arka-monitoring
---
# Prometheus PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: arka-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 10Gi
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: arka-monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=200h'
          - '--web.enable-lifecycle'
        ports:
        - containerPort: 9090
          name: prometheus
        volumeMounts:
        - name: prometheus-config-vol
          mountPath: /etc/prometheus/
        - name: prometheus-storage-vol
          mountPath: /prometheus/
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: prometheus-config-vol
        configMap:
          name: prometheus-config
      - name: prometheus-storage-vol
        persistentVolumeClaim:
          claimName: prometheus-pvc
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: arka-monitoring
  labels:
    app: prometheus
spec:
  type: NodePort
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090
    protocol: TCP
    name: prometheus
  selector:
    app: prometheus
